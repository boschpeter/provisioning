---
  # wget (default) or curl
  - block:
    - name: Check if wget or curl is installed
      command: "which {{ nvm_install }}"
      register: cmd
  
    - name: Determine if install type wget
      set_fact:
        run_command: 'wget -qO-'
      when: "'/wget' in cmd.stdout"
  
    - name: Determine if install type curl
      set_fact:
        run_command: 'curl -o-'
      when: "'/curl' in cmd.stdout"
  
    - name: Create destination dir if it does not exist
      file:
        mode: 0775
        path: "{{ nvm_dir }}"
        state: directory
      when: "nvm_dir != ''"
  
    - name: Install NVM
      shell: "{{ run_command }} https://raw.githubusercontent.com/creationix/nvm/v{{ nvm_version }}/install.sh | NVM_SOURCE={{ nvm_source }} NVM_DIR={{ nvm_dir }} PROFILE={{ nvm_profile }} bash"
      args:
       warn: false
      register: nvm_result
  
  # Autocomplete
  # tail .bashrc  = nvm_profile
  #  export NVM_DIR="/home/boscp08/.nvm"
  # [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

#  # Installed via https://github.com/morgangraphics/ansible-role-nvm START ANSIBLE MANAGED BLOCK
#  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
#  # https://github.com/morgangraphics/ansible-role-nvm END ANSIBLE MANAGED BLOCK


#    - name: Add NVM autocomplete to nvm_profile
#      blockinfile:
#       block: |
#        [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
#       insertafter: "# This loads nvm"
#       marker_begin: "Installed via {{ role_repo }} START"
#       marker_end: "{{ role_repo }} END"
#       mode: 0644
#       path: "{{ nvm_profile }}"
#       state: present
 

    
  # https://stackoverflow.com/questions/53596477/ansible-install-node-with-nvm
  #  - name: Install node and set version should work
  #    shell: "source /home/boscp08/.nvm/nvm.sh && nvm install 8.11.3" 
  #    args:
  #      executable: /bin/bash
  
  #  - name: check NVM Version weird
  #    shell: source /home/boscp08/.nvm/nvm.sh &&  bash -ic "nvm --version"
  #    args:
  #      executable: /bin/bash
  #    register: version_response
  
    when: "nvm_install == 'curl' or  nvm_install == 'wget'"
  
  
  
  
  ##  boscp08@ubuntuVMX:~$ sudo chmod 777 -R .nvm
  ##  boscp08@ubuntuVMX:~$ nvm install v8.11.3
  #  Downloading and installing node v8.11.3...
  #  Downloading https://nodejs.org/dist/v8.11.3/node-v8.11.3-linux-x64.tar.xz...
    ######################################################################### 100.0%
  #  Computing checksum with sha256sum
  #  Checksums matched!
  #  nvm is not compatible with the "NPM_CONFIG_PREFIX" environment variable: currently set to "/usr/local/lib/npm"
  #  Run `unset NPM_CONFIG_PREFIX` to unset it.
  ## boscp08@ubuntuVMX:~$ unset NPM_CONFIG_PREFIX
  ##  boscp08@ubuntuVMX:~$ nvm use v8.11.3
  #  Now using node v8.11.3 (npm v5.6.0)
    
  
  # This scenario handles the first run/install of NVM because this will automatically
  # alias the specified version as default - This should handle most use cases
  #- name: Install Node huh
  #  shell: source /home/boscp08/.nvm/nvm.sh && bash -ic "nvm install {{ nodejs_version }}"
  #  #shell: "nvm install v8.11.3"
  #  args:
  #   executable: /bin/bash
    # when: "nvm_commands | length == 0 or default == False"
  
  # In the event there are multiple versions of Node being installed/used/upgraded
  # on the same machine we'll need to alias the default version accordingly

#
#
#  - name: Set default version of Node if multiple versions exist
#    shell: source /home/boscp08/.nvm/nvm.sh && bash -ic "nvm alias default {{ nodejs_version }}"
#    when:  "default == True"
#  
#  - name: Run whatever nvm_commands are there
#    shell: source /home/boscp08/.nvm/nvm.sh && bash -ic "{{ item }}"
#    with_items:
#      "{{ nvm_commands }}"
#    when: "nvm_commands | length >= 1"
#  
#    - name: "node"
#    shell: >
#        . /home/boscp08/.nvm/nvm.sh && nvm install v8.11.3
#    args:
#      executable: /bin/bash
#      chdir: ""
#      creates: "/home/boscp08/.nvm/versions/v8.11.3"
#    loop:
#      - node
#
#  - name: "use v8.11.3"
#    shell: >
#        . /home/boscp08/.nvm/nvm.sh && nvm use v8.11.3
#    args:
#      executable: /bin/bash
#